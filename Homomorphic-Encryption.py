# -*- coding: utf-8 -*-
"""HomorphicEncryption.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aoOYL022xZnwR01GfFwEvejqKa3Z18jo
"""

import numpy as np

# Define a function for encrypting a string attribute
def encrypt_string(attribute, public_key):
    return ''.join([chr((ord(char) + public_key - 32) % 95 + 32) for char in attribute])

# Define a function for decrypting an encrypted string attribute
def decrypt_string(encrypted_attribute, public_key):
    return ''.join([chr((ord(char) - public_key - 32) % 95 + 32) for char in encrypted_attribute])

# Define a function for encrypting a numeric attribute
def encrypt_numeric(attribute, public_key, n):
    return (int(attribute) + public_key) % n

# Define a function for decrypting an encrypted numeric attribute
def decrypt_numeric(encrypted_attribute, public_key, n):
    return (encrypted_attribute - public_key) % n

# List of sample records (dynamic JSON values)
sample_records = [
    {
        "account_number": "123456789",
        "Name": "Prakash_Raj",
        "DOB": "09/27/1998",
        "balance": 50000.0,
        "transaction_history": ["Deposit $1000", "Withdraw $500", "Transfer $200"],
    },{
        "account_number": "987654321",
        "Name": "Prakash Raj Baskar Raj",
        "balance": 7500.0,
        "transaction_history": ["Deposit :$2000", "Withdraw :$1000", "Transfer :$300"]
    }
    # Add more dynamic JSON values here...
]

# Public parameters for encryption (usually generated by the encryption algorithm)
public_key = np.random.randint(1, 100)
n = 100  # Modulus for encryption

# Encrypt and decrypt each record in the sample_records list
for record in sample_records:
    encrypted_record = {}
    decrypted_record = {}
    for key, value in record.items():
        if isinstance(value, str):
            encrypted_record[key] = encrypt_string(value, public_key)
            decrypted_record[key] = decrypt_string(encrypted_record[key], public_key)
        elif isinstance(value, (int, float)):
            encrypted_record[key] = encrypt_string(str(value), public_key)
            decrypted_record[key] = float(decrypt_string(encrypted_record[key], public_key))
        elif isinstance(value, list):
            encrypted_list = []
            decrypted_list = []
            for entry in value:
                encrypted_entry = encrypt_string(entry, public_key)
                encrypted_list.append(encrypted_entry)
                decrypted_list.append(decrypt_string(encrypted_entry, public_key))
            encrypted_record[key] = encrypted_list
            decrypted_record[key] = decrypted_list

    # Print original and encrypted data, and decrypted data for each record
    print("\nRecord:")
    print("Original:", record)
    print("Encrypted:", encrypted_record)
    print("Decrypted:", decrypted_record)